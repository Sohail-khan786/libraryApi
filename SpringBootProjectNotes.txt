*******************Project 1************************


Dependencies : web , JPA (for database operation) , lambok(Big annotation library to Reduce code), MySql connector(required DB conector) , foxSwagger and foxSwaggerUI for documentation 

Its necessary to write zero arguement constructors and all arguement constructors for all Models

New Good annotations:

@Entity -> to show that , the class objects map to  a table
@getter
@setter 
@table(name="table_name")
@noArguementConstructor
@allArguementConstructor 
@toString

@id -> to define Privat Key 
@generateValue -> to automatic generate primary key

@transactional -> to define all sql actions are transactional and follow ACID properties

@RequestBody ->while sending a post request

***********************Database Relationships using JPA ****************************************

watch relevant youtube tutorials

many to one 
https://hellokoding.com/jpa-one-to-many-relationship-mapping-example-with-spring-boot-maven-and-mysql/


one to one
https://hellokoding.com/jpa-one-to-one-foreignkey-relationship-example-with-spring-boot-maven-and-mysql/

************************************************************************************************

@OneToOne --> defines a one-to-one relationship between 2 entities.

@JoinColumn --> defines foreign key column and indicates the owner of the relationship.

mappedBy indicates the inverse of the relationship.

unique = true enforces the unique constraint, 1 address belongs to only 1 library.

Hacks :
  Repository Interface Extend JPA repository ->> for every entity class -> so that u dont have to run a single Sql Query




IMP 4 Classes for Every model:

controller  class-->> for api/url requests mappings
                 --> --> has service class instance to use its method

service class-->>connect to database and  to provide data to controllers
             --> has CrudRepository instance to use its method

@entity class -->> to show its entity class to JPA
normal class -->> entity Class -->> to define object of that resource
             -->> @Id - shows primary key
             -->> has all properties , getters , setters , zero arguement constructors and all arguement constructors
             

Repository or CrudRepository Interface -->> to use spring crud operations directly





Standard Controller method Examples and Request types 

   @GetMapping("/getAllBooks")
	public List<book> getAllBooks() {
		
		return bookDataService.getAllBooks();
		
	}
	
	@PostMapping("/addBook")
	public void addBook(@RequestBody book b){
		bookDataService.saveBook(b);
	}
	
	@PostMapping("/deleteBook/{id}")
	public void removeBook(@PathVariable Integer id){
		bookDataService.saveBook(b);
	}

