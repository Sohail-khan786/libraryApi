*******************Project 1************************


Dependencies : web , JPA (for database operation) , lambok(Big annotation library to Reduce code), MySql connector(required DB conector) , foxSwagger and foxSwaggerUI for documentation 

Its necessary to write zero arguement constructors and all arguement constructors for all Models

New Good annotations:

@Entity -> to show that , the class objects map to  a table
@getter
@setter 
@table(name="table_name")
@data                         -> create getter and setter dynamically
@noArguementConstructor       -> lambok 
@allArguementConstructor      -> lombok
@toString
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

@id -> to define Privat Key 
@generateValue -> to automatic generate primary key

@transactional -> to define all sql actions are transactional and follow ACID properties

@RequestBody ->while sending a post request

***********************Database Relationships using JPA ****************************************

watch relevant youtube tutorials

many to one 
https://hellokoding.com/jpa-one-to-many-relationship-mapping-example-with-spring-boot-maven-and-mysql/

https://www.callicoder.com/hibernate-spring-boot-jpa-one-to-many-mapping-example/


one to one
https://hellokoding.com/jpa-one-to-one-foreignkey-relationship-example-with-spring-boot-maven-and-mysql/


notes  : https://www.youtube.com/watch?v=8qhaDBCJh6I
       --> @oneToMany  --> targetEntity and cascadeType
       -->@Query to write custom query
       -->@ManyToOne     and       @JoinColumn -> declare foreign key and it automatically captures primary key of the that Entity 
       -->@onDelete(action = onDeleteAction.Cascade)


After lot of struggling in bi-directional mapping , it was getting hard for me , so choose this for reference for uni-directional mapping:
http://websystique.com/hibernate/hibernate-many-to-one-unidirectional-annotation-example/

//why isn't fetchType=lazy not working



************************************************************************************************

@OneToOne --> defines a one-to-one relationship between 2 entities.

@JoinColumn --> defines foreign key column and indicates the owner of the relationship.

mappedBy indicates the inverse of the relationship.

unique = true enforces the unique constraint, 1 address belongs to only 1 library.

Hacks :
  Repository Interface Extend JPA repository ->> for every entity class -> so that u dont have to run a single Sql Query
  public class Book implements Serializable > so that ACID properties are observed




IMP 4 Classes for Every model: enity / model , controller , service , repository

controller  class-->> for api/url requests mappings
                 --> --> has service class instance to use its method

service class-->>connect to database and  to provide data to controllers
             --> has CrudRepository instance to use its method

@entity class -->> to show its entity class to JPA
normal class -->> entity Class -->> to define object of that resource
             -->> @Id - shows primary key
             -->> has all properties , getters , setters , zero arguement constructors and all arguement constructors
             

Repository or CrudRepository Interface -->> to use spring crud operations directly





Standard Controller method Examples and Request types 

   @GetMapping("/getAllBooks")
	public List<book> getAllBooks() {
		
		return bookDataService.getAllBooks();
		
	}
	
	@PostMapping("/addBook")
	public void addBook(@RequestBody book b){
		bookDataService.saveBook(b);
	}
	
	@PostMapping("/deleteBook/{id}")
	public void removeBook(@PathVariable Integer id){
		bookDataService.saveBook(b);
	}


*****************application properties config files**************

# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:mysql://localhost:3306/jpa_one_to_many_demo?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
spring.datasource.username=root
spring.datasource.password=root

# Hibernate

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE


******************************************************************


*****************handy things********************

when u want to create a field and not let it update
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_at", nullable = false, updatable = false)
    @CreatedDate
    private Date createdAt;

************************************************